{"ast":null,"code":"import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\n\nconst isBlockListDisabled = options => {\n  var _options$list;\n\n  return !((_options$list = options.list) === null || _options$list === void 0 ? void 0 : _options$list.length) || !options.watchVariable;\n};\n\nconst getValue = (data, name) => {\n  return data instanceof FormData ? data.get(name) : data[name];\n};\n\nexport const isBlockedValueInParams = (options, params) => {\n  if (isBlockListDisabled(options)) return false;\n  validateBlockListParams(options.list, options.watchVariable);\n  const value = getValue(params, options.watchVariable);\n  if (typeof value !== 'string') return false;\n  return options.list.includes(value);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/new project 2/databeastai/frontend/node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js"],"names":["validateBlockListParams","isBlockListDisabled","options","list","length","watchVariable","getValue","data","name","FormData","get","isBlockedValueInParams","params","value","includes"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,oDAAxC;;AACA,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AAAA;;AACrC,SAAO,mBAACA,OAAO,CAACC,IAAT,kDAAC,cAAcC,MAAf,KAAyB,CAACF,OAAO,CAACG,aAAzC;AACH,CAFD;;AAGA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC7B,SAAOD,IAAI,YAAYE,QAAhB,GAA2BF,IAAI,CAACG,GAAL,CAASF,IAAT,CAA3B,GAA4CD,IAAI,CAACC,IAAD,CAAvD;AACH,CAFD;;AAGA,OAAO,MAAMG,sBAAsB,GAAG,CAACT,OAAD,EAAUU,MAAV,KAAqB;AACvD,MAAIX,mBAAmB,CAACC,OAAD,CAAvB,EACI,OAAO,KAAP;AACJF,EAAAA,uBAAuB,CAACE,OAAO,CAACC,IAAT,EAAeD,OAAO,CAACG,aAAvB,CAAvB;AACA,QAAMQ,KAAK,GAAGP,QAAQ,CAACM,MAAD,EAASV,OAAO,CAACG,aAAjB,CAAtB;AACA,MAAI,OAAOQ,KAAP,KAAiB,QAArB,EACI,OAAO,KAAP;AACJ,SAAOX,OAAO,CAACC,IAAR,CAAaW,QAAb,CAAsBD,KAAtB,CAAP;AACH,CARM","sourcesContent":["import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\r\nconst isBlockListDisabled = (options) => {\r\n    return !options.list?.length || !options.watchVariable;\r\n};\r\nconst getValue = (data, name) => {\r\n    return data instanceof FormData ? data.get(name) : data[name];\r\n};\r\nexport const isBlockedValueInParams = (options, params) => {\r\n    if (isBlockListDisabled(options))\r\n        return false;\r\n    validateBlockListParams(options.list, options.watchVariable);\r\n    const value = getValue(params, options.watchVariable);\r\n    if (typeof value !== 'string')\r\n        return false;\r\n    return options.list.includes(value);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}